from dotenv import load_dotenv
import os
import sqlite3
import telebot
import numpy as np
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

import random
def generate_captcha():
    operators = ['+', '-', '*', '/']
    num1 = random.randint(1, 10)
    num2 = random.randint(1, 10)
    operator = random.choice(operators)

    if operator == '/':
        # –î–ª—è –¥–µ–ª–µ–Ω–∏—è —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–µ–ª–∏—Ç–µ–ª—å –Ω–µ 0 –∏ –¥–µ–ª–µ–Ω–∏–µ –¥–∞—ë—Ç —Ü–µ–ª—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        num1 = num1 * num2

    captcha = f"{num1} {operator} {num2}"
    answer = eval(captcha)

    return captcha, int(answer)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ config.env
load_dotenv(dotenv_path='config.env')

# –¢–æ–∫–µ–Ω –¥–ª—è –±–æ—Ç–∞
API_TOKEN = os.getenv('TELEGRAM_API_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN, skip_pending=True)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ ID –∏ username
ADMIN_USERNAMES = ['Sub_Pielea_Mea']

# –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
REQUIRED_CHANNELS = ['@test1_PythonPI', '@test2_PythonPI']

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
MAX_WINNERS = 1

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(message):
    username = message.from_user.username
    return username and username in ADMIN_USERNAMES

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤
def execute_query(query, parameters=()):
    with sqlite3.connect('database.db') as conn:
        cursor = conn.cursor()
        cursor.execute(query, parameters)
        conn.commit()
        return cursor

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
def check_subscriptions(user_id):
    for channel in REQUIRED_CHANNELS:
        if not is_subscribed(user_id, channel):
            return False, channel
    return True, None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª
def is_subscribed(user_id, channel_id):
    try:
        status = bot.get_chat_member(channel_id, user_id).status
        return status in ['member', 'administrator', 'creator']
    except Exception as e:
        # print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel_id}: {e}")
        return False

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def send_message(chat_id, text):
    bot.send_message(chat_id, text)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_cache = {}

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    does_exist = bool(execute_query("SELECT telegram_id FROM users WHERE telegram_id = ?", (user_id,)).fetchone())

    if does_exist:
        subscribed, unsubscribed_channel = check_subscriptions(user_id)

        if not subscribed:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            photo_path = 'fashion_welcome.jpg'
            message_text = (
                f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "FashionBot"!</b>\n\n'
                f'üíÑ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—ë –æ –º–æ–¥–µ, —Å—Ç–∏–ª–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–∏.\n\n'
                f'üå∏ –ú—ã —Å–æ–∑–¥–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∫—Ä–∞—Å–æ—Ç—ã –∏ —É—Ç–æ–Ω—á–µ–Ω–Ω–æ—Å—Ç–∏:\n\n'
                f'üîó <a href="https://t.me/test1_PythonPI">–ë–õ–ï–°–ö –ò –®–Å–ü–û–¢</a>\n'
                f'üîó <a href="https://t.me/test2_PythonPI">–ú–ò–† –ê–†–û–ú–ê–¢–û–í</a>\n\n'
                f'‚ú® –ß—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–∞—à —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ üéÅ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å".'
            )

            markup = InlineKeyboardMarkup()
            participate_button = InlineKeyboardButton(text="üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")
            markup.add(participate_button)

            with open(photo_path, 'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=message_text, parse_mode='HTML', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '‚ö†Ô∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.', parse_mode='HTML')

    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
        captcha_question, captcha_answer = generate_captcha()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_cache[user_id] = {"captcha_answer": captcha_answer, "message": message}

        bot.send_message(
            message.chat.id,
            f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Ä–µ—à–∏—Ç–µ –∫–∞–ø—á—É: {captcha_question} = ?\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:"
        )


@bot.message_handler(func=lambda msg: msg.from_user.id in user_cache)
def captcha_check(msg):
    user_id = msg.from_user.id
    original_message = user_cache[user_id]["message"]

    try:
        user_answer = int(msg.text)

        if user_answer == user_cache[user_id]["captcha_answer"]:
            bot.send_message(msg.chat.id, "‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∫–∞–ø—á–∏
            del user_cache[user_id]

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            args = original_message.text.split()
            referral_link = f'ref_{user_id}'

            if len(args) > 1:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                ref_code = args[1]
                inviter = execute_query("SELECT telegram_id FROM users WHERE referral_code = ?", (ref_code,)).fetchone()

                if inviter:
                    inviter_id = inviter[0]
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π —É –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
                    execute_query(
                        "UPDATE users SET invites_count = invites_count + 1 WHERE telegram_id = ?",
                        (inviter_id,)
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    execute_query(
                        "INSERT INTO users (telegram_id, referral_code, inviter, invites_count) VALUES (?, ?, ?, ?)",
                        (user_id, referral_link, inviter_id, 0)
                    )
                    bot.send_message(inviter_id, f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user_id}!")
                else:
                    bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥.")
                    return
            else:
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
                execute_query(
                    "INSERT INTO users (telegram_id, referral_code, inviter, invites_count) VALUES (?, ?, ?, ?)",
                    (user_id, referral_link, None, 0)
                )

            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            photo_path = 'fashion_welcome.jpg'
            message_text = (
                f'<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "FashionBot"!</b>\n\n'
                f'üíÑ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å—ë –æ –º–æ–¥–µ, —Å—Ç–∏–ª–µ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–∏.\n\n'
                f'üå∏ –ú—ã —Å–æ–∑–¥–∞–µ–º –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –∫—Ä–∞—Å–æ—Ç—ã –∏ —É—Ç–æ–Ω—á–µ–Ω–Ω–æ—Å—Ç–∏:\n\n'
                f'üîó <a href="https://t.me/test1_PythonPI">–ë–õ–ï–°–ö –ò –®–Å–ü–û–¢</a>\n'
                f'üîó <a href="https://t.me/test2_PythonPI">–ú–ò–† –ê–†–û–ú–ê–¢–û–í</a>\n\n'
                f'‚ú® –ß—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å–∫—Ä—ã—Ç—å –≤–∞—à —Å—Ç–∏–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ üéÅ, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å".'
            )

            # –ö–Ω–æ–ø–∫–∞ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
            markup = InlineKeyboardMarkup()
            participate_button = InlineKeyboardButton(text="üéâ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="participate")
            markup.add(participate_button)

            with open(photo_path, 'rb') as photo:
                bot.send_photo(msg.chat.id, photo, caption=message_text, parse_mode='HTML', reply_markup=markup)
        else:
            bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–∞–ø—á—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    except ValueError:
        bot.send_message(msg.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
@bot.callback_query_handler(func=lambda call: call.data == "participate")
def participate(call):
    user_id = call.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —É—á–∞—Å—Ç–∏—è
    user = execute_query("SELECT particip FROM users WHERE telegram_id = ?", (user_id,)).fetchone()

    if user is None:
        bot.answer_callback_query(call.id, text='‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.',
                                  show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    subscribed, unsubscribed_channel = check_subscriptions(user_id)
    if not subscribed:
        bot.answer_callback_query(call.id, text=f'‚ö†Ô∏è –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å!',
                                  show_alert=True)
        return

    # –ï—Å–ª–∏ —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç
    if user[0] == 1:
        bot.answer_callback_query(call.id, text='‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ.', show_alert=True)
        return

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    execute_query("UPDATE users SET particip = 1 WHERE telegram_id = ?", (user_id,))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    referral_code = execute_query("SELECT referral_code FROM users WHERE telegram_id = ?", (user_id,)).fetchone()[0]
    invite_link = f'https://t.me/APD52_bot?start={referral_code}'

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π
    photo_path_2 = 'fashion_welcome2.jpg'  # –£–∫–∞–∂–∏ –ø—É—Ç—å –∫ –Ω—É–∂–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    message_text_2 = (
        'üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å–æ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º</b>\n\n'
        f'‚ùóÔ∏è –í–æ—Ç —Ç–≤–æ—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<a>{invite_link}</a>\n\n'
        '–ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ –Ω–µ–π —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π, –ø–æ–ª—É—á–∞–π –∑–∞ –∫–∞–∂–¥–æ–≥–æ –æ–¥–∏–Ω –±–∏–ª–µ—Ç, –∫–æ–ø–∏ –º–∞–∫—Å–∏–º—É–º –±–∏–ª–µ—Ç–æ–≤ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π —Å–≤–æ–∏ —à–∞–Ω—Å—ã –Ω–∞ –≤—ã–∏–≥—Ä—ã—à!üèÜ'
    )
    with open(photo_path_2, 'rb') as photo:
        bot.send_photo(call.message.chat.id, photo, caption=message_text_2, parse_mode='HTML')

    bot.answer_callback_query(call.id, text='üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!', show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['set_winners'])
def set_winners(message):
    if not is_admin(message):
        send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /set_winners 5)
        new_winners_count = int(message.text.split()[1])
        global MAX_WINNERS
        MAX_WINNERS = new_winners_count  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {MAX_WINNERS}.")
    except (IndexError, ValueError):
        send_message(message.chat.id,
                     "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π. –ü—Ä–∏–º–µ—Ä: /set_winners 3")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ telegram_id (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['delete_user'])
def delete_user(message):
    if not is_admin(message):
        send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    try:
        telegram_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram_id. –ü—Ä–∏–º–µ—Ä: /delete_user 123456789')
        return

    user = execute_query("SELECT * FROM users WHERE telegram_id = ?", (telegram_id,)).fetchone()
    if not user:
        send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        inviter_of_user = user[4]
        print(inviter_of_user)
        try:
            execute_query("UPDATE users SET invites_count = invites_count - 1 WHERE telegram_id = ?",
                          (inviter_of_user,))
            execute_query("DELETE FROM users WHERE telegram_id = ?", (telegram_id,))
            execute_query("UPDATE users SET particip = 0 WHERE invites_count < 1")
            send_message(message.chat.id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {telegram_id} –±—ã–ª —É–¥–∞–ª–µ–Ω.')
        except:
            pass

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['draw'])
def draw_raffle(message):
    if not is_admin(message):
        bot.send_message(message.chat.id, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è–º–∏
    all_partic = execute_query("SELECT telegram_id, invites_count FROM users WHERE invites_count >= 1").fetchall()
    if not all_partic:
        bot.send_message(message.chat.id, '‚ùå –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É—Å–ª–æ–≤–∏—è–º –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞.')
        return

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    total_invites = sum([pair[1] for pair in all_partic])
    users = [pair[0] for pair in all_partic]
    probs = [pair[1] / total_invites for pair in all_partic]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    max_winners = min(len(users), MAX_WINNERS)
    if max_winners == 0:
        bot.send_message(message.chat.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.')
        return

    # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winners = np.random.choice(users, size=max_winners, replace=False, p=probs)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏
    winners_message = ''
    for winner in winners:
        try:
            chat = bot.get_chat(winner)
            username = f'@{chat.username}' if chat.username else '–ë–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            winners_message += f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {username} (ID: {winner})\n'
        except Exception as e:
            winners_message += f'–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ID {winner} (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)\n'

    bot.send_message(message.chat.id, f'üéâ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners_message}')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['reset_users'])
def reset_users(message):
    if not is_admin(message):
        send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    execute_query("DELETE FROM users")
    send_message(message.chat.id, '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.')

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.message_handler(commands=['participants'])
def show_participants(message):
    if not is_admin(message):
        send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö (—Å–Ω–∞—á–∞–ª–∞ > 0, –ø–æ—Ç–æ–º = 0)
    users = execute_query(
        "SELECT telegram_id, invites_count, inviter FROM users ORDER BY invites_count DESC").fetchall()

    print(users)
    if not users:
        send_message(message.chat.id, '–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants_with_invites = []
    participants_without_invites = []

    participants_message = "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω–∫—É—Ä—Å–∞:\n"
    for user in users:
        telegram_id, invites_count, inviter = user

        if invites_count:
            username = bot.get_chat(telegram_id).username
            participants_message += f"ID:{telegram_id}, UserName:@{username},Added:{invites_count}:\n"
            n = 1
            for user_invited in users:
                telegram_id_invited, _, inviter_20 = user_invited
                if telegram_id == inviter_20 and telegram_id != telegram_id_invited:
                    username2 = bot.get_chat(telegram_id_invited).username
                    participants_message += f"\t{n}. ID:{telegram_id_invited}, UserName:@{username2}\n"
                    n += 1

    send_message(message.chat.id, participants_message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['help_adm'])
def admin_help(message):
    if not is_admin(message):
        send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.')
        return
    help_message = """
    –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:
    /help_adm - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
    /set_winners [—á–∏—Å–ª–æ] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ.
    /draw - –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à.
    /participants - –ü–æ–∫–∞–∑–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—É—Ä—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö.
    /delete_user [telegram_id] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
    /reset_users - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    send_message(message.chat.id, help_message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.remove_webhook()
bot.polling(none_stop=True)